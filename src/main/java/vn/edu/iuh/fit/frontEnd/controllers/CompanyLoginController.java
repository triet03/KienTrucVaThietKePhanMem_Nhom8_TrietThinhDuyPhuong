package vn.edu.iuh.fit.frontEnd.controllers;

import io.github.resilience4j.ratelimiter.RateLimiter;
import io.github.resilience4j.ratelimiter.RateLimiterRegistry;
import io.github.resilience4j.ratelimiter.RequestNotPermitted;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import vn.edu.iuh.fit.backEnd.models.Company;
import vn.edu.iuh.fit.backEnd.repositories.CompanyRepository;

import java.util.Optional;
import java.util.UUID;

@Controller
public class CompanyLoginController {
    @Autowired
    private RateLimiterRegistry rateLimiterRegistry; // ‚úÖ Th√™m d√≤ng n√†y
    @Autowired
    private CompanyRepository companyRepository;

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // ‚úÖ 1. Hi·ªÉn th·ªã form ƒëƒÉng k√Ω nh√† tuy·ªÉn d·ª•ng
    @GetMapping("/register/company")
    public String showCompanyRegisterForm(Model model) {
        model.addAttribute("company", new Company());
        return "company_register";
    }

    // ‚úÖ 2. X·ª≠ l√Ω ƒëƒÉng k√Ω
    @PostMapping("/register/company")
    public String processCompanyRegister(@ModelAttribute("company") Company company, Model model) {
        if (companyRepository.findByEmail(company.getEmail()).isPresent()) {
            model.addAttribute("error", "‚ùå Email ƒë√£ t·ªìn t·∫°i!");
            return "company_register";
        }

        company.setPassword(passwordEncoder.encode(company.getPassword()));
        company.setVerificationToken(UUID.randomUUID().toString());
        company.setEmailVerified(false);
        companyRepository.save(company);

        try {
            sendVerificationEmail(company);
        } catch (MessagingException e) {
            model.addAttribute("error", "‚ùå L·ªói khi g·ª≠i email x√°c th·ª±c!");
            return "company_register";
        }

        model.addAttribute("message", "‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.");
        return "company_login";
    }

    // ‚úÖ 3. G·ª≠i email x√°c th·ª±c
    private void sendVerificationEmail(Company company) throws MessagingException {
        String subject = "üîí X√°c th·ª±c t√†i kho·∫£n Nh√† tuy·ªÉn d·ª•ng";
        String verifyUrl = "http://localhost:9998/verify/company?token=" + company.getVerificationToken();
        String body = "<p>Ch√†o <b>" + company.getCompName() + "</b>,</p>"
                + "<p>Vui l√≤ng nh·∫•n v√†o ƒë∆∞·ªùng link d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>"
                + "<p><a href='" + verifyUrl + "'>X√°c th·ª±c t√†i kho·∫£n</a></p>";

        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true);
        helper.setTo(company.getEmail());
        helper.setSubject(subject);
        helper.setText(body, true);

        mailSender.send(message);
    }

    // ‚úÖ 4. X√°c th·ª±c email & ƒëƒÉng nh·∫≠p
    @GetMapping("/verify/company")
    public String verifyEmail(@RequestParam String token, Model model) {
        Optional<Company> companyOptional = companyRepository.findByVerificationToken(token);

        if (companyOptional.isPresent()) {
            Company company = companyOptional.get();
            company.setEmailVerified(true);
            company.setVerificationToken(null);
            companyRepository.save(company);

            Authentication authentication = new UsernamePasswordAuthenticationToken(
                    company, null, company.getAuthorities());
            SecurityContextHolder.getContext().setAuthentication(authentication);

            return "redirect:/companyManager"; // ‚úÖ CHU·∫®N: gi·ªëng CompanyManagerController
        } else {
            model.addAttribute("message", "‚ùå M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
            model.addAttribute("success", false);
            return "verification_result";
        }
    }

    // ‚úÖ 5. Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
    @GetMapping("/login/company")
    public String showCompanyLoginForm(@RequestParam(value = "error", required = false) String error,
                                       @RequestParam(value = "logout", required = false) String logout,
                                       Model model) {
        if (error != null) {
            model.addAttribute("error", "‚ùå Sai email ho·∫∑c m·∫≠t kh·∫©u!");
        }
        if (logout != null) {
            model.addAttribute("message", "‚úÖ ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!");
        }
        return "company_login";
    }

    // ‚úÖ 6. X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
    @PostMapping("/login/company")
    public String processCompanyLogin(@RequestParam String email,
                                      @RequestParam String password,
                                      Model model) {

        RateLimiter limiter = rateLimiterRegistry.rateLimiter("loginCompanyLimiter");

        try {
            // Logic ƒë∆∞·ª£c x·ª≠ l√Ω b√™n trong lambda, nh∆∞ng k·∫øt qu·∫£ ƒë∆∞·ª£c g√°n ra ngo√†i
            String[] resultHolder = new String[1];
            RateLimiter.decorateRunnable(limiter, () -> {
                Optional<Company> companyOptional = companyRepository.findByEmail(email);

                if (companyOptional.isEmpty()) {
                    resultHolder[0] = showError(model, "‚ùå T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
                    return;
                }

                Company company = companyOptional.get();

                if (!passwordEncoder.matches(password, company.getPassword())) {
                    resultHolder[0] = showError(model, "‚ùå Sai m·∫≠t kh·∫©u!");
                    return;
                }

                if (!company.isEmailVerified()) {
                    resultHolder[0] = showError(model, "‚ùå T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c email!");
                    return;
                }

                Authentication authentication = new UsernamePasswordAuthenticationToken(
                        company, null, company.getAuthorities());
                SecurityContextHolder.getContext().setAuthentication(authentication);

                resultHolder[0] = "redirect:/companyManager";
            }).run();

            return resultHolder[0];

        } catch (RequestNotPermitted e) {
            model.addAttribute("error", "‚ö†Ô∏è ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn ƒëƒÉng nh·∫≠p cho ph√©p. Vui l√≤ng th·ª≠ l·∫°i sau 1 ph√∫t.");
            return "company_login";
        }
    }

    private String showError(Model model, String errorMsg) {
        model.addAttribute("error", errorMsg);
        return "company_login";
    }
}